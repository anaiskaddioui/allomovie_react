[{"C:\\React\\allomovie\\src\\index.js":"1","C:\\React\\allomovie\\src\\App.js":"2","C:\\React\\allomovie\\src\\Components\\Card.jsx":"3","C:\\React\\allomovie\\src\\Components\\Favoris.jsx":"4","C:\\React\\allomovie\\src\\Components\\AppRouting.jsx":"5","C:\\React\\allomovie\\src\\Components\\AppMovie.jsx":"6","C:\\React\\allomovie\\src\\Components\\Image.jsx":"7","C:\\React\\allomovie\\src\\Components\\DetailMovie.jsx":"8","C:\\React\\allomovie\\src\\Components\\navigation\\Navbar.jsx":"9","C:\\React\\allomovie\\src\\Components\\navigation\\Search.jsx":"10","C:\\React\\allomovie\\src\\routes\\Routes.jsx":"11","C:\\React\\allomovie\\src\\api-back\\ApiMovie.jsx":"12","C:\\React\\allomovie\\src\\error-404\\Error404.jsx":"13","C:\\React\\allomovie\\src\\presentation\\Home.jsx":"14","C:\\React\\allomovie\\src\\Components\\RenderOneMovie.jsx":"15"},{"size":432,"mtime":1608592153729,"results":"16","hashOfConfig":"17"},{"size":281,"mtime":1608599440172,"results":"18","hashOfConfig":"17"},{"size":2484,"mtime":1619291444301,"results":"19","hashOfConfig":"17"},{"size":239,"mtime":1608598541987,"results":"20","hashOfConfig":"17"},{"size":519,"mtime":1618949048775,"results":"21","hashOfConfig":"17"},{"size":3706,"mtime":1619273069936,"results":"22","hashOfConfig":"17"},{"size":350,"mtime":1619272924056,"results":"23","hashOfConfig":"17"},{"size":670,"mtime":1619114072052,"results":"24","hashOfConfig":"17"},{"size":1315,"mtime":1619293110702,"results":"25","hashOfConfig":"17"},{"size":6151,"mtime":1619293811376,"results":"26","hashOfConfig":"17"},{"size":1216,"mtime":1619277241422,"results":"27","hashOfConfig":"17"},{"size":782,"mtime":1619265946598,"results":"28","hashOfConfig":"17"},{"size":250,"mtime":1612555020096,"results":"29","hashOfConfig":"17"},{"size":446,"mtime":1612555399578,"results":"30","hashOfConfig":"17"},{"size":2820,"mtime":1619280646386,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"gbsu2z",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},"C:\\React\\allomovie\\src\\index.js",[],["66","67"],"C:\\React\\allomovie\\src\\App.js",[],"C:\\React\\allomovie\\src\\Components\\Card.jsx",[],"C:\\React\\allomovie\\src\\Components\\Favoris.jsx",[],"C:\\React\\allomovie\\src\\Components\\AppRouting.jsx",[],"C:\\React\\allomovie\\src\\Components\\AppMovie.jsx",[],"C:\\React\\allomovie\\src\\Components\\Image.jsx",[],["68","69"],"C:\\React\\allomovie\\src\\Components\\DetailMovie.jsx",[],"C:\\React\\allomovie\\src\\Components\\navigation\\Navbar.jsx",[],"C:\\React\\allomovie\\src\\Components\\navigation\\Search.jsx",["70"],"import { Redirect, withRouter } from 'react-router-dom';\r\n\r\nimport { ErrorMessage, Form, Formik } from 'formik';\r\nimport React, { Component } from 'react';\r\nimport * as yup from 'yup';\r\nimport './../../assets/Components.css';\r\nimport ApiMovie from './../../api-back/ApiMovie';\r\nimport { MDBBtn, MDBCol, MDBContainer, MDBRow } from 'mdbreact';\r\n\r\n\r\n\r\nconst initialValues = {\r\n\r\n    search: '',\r\n    language: '',\r\n    keyAPI : ''\r\n}\r\n\r\n\r\nconst validationSchema = yup.object().shape({\r\n\r\n    search: yup.string()\r\n                    .min(2, 'Ce champ doit contenir au minimum 2 caractères')\r\n                    .max(500, 'Ce champs doit contenir au maximum 500 caractères').trim(),\r\n    language: yup.string()\r\n    \r\n})\r\n\r\nclass Search extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            movies : [],\r\n            renderOneMovie: false,\r\n        }\r\n        //this.routeChange = this.routeChange.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        ApiMovie.get('discover/movie')\r\n            .then(response => {\r\n                this.setState({ \r\n\r\n                    movies: response.data.results\r\n                    \r\n                });               \r\n            })\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        console.log(e.target.value);\r\n    }\r\n\r\n    /*submit = (values) => {\r\n\r\n        const query = '?' + Object.keys(values)\r\n            .map( key => key + '=' + values[key] + '&')\r\n            .join('');\r\n       \r\n        ApiMovie.get('/search/movie' + query)\r\n            .then(response => {\r\n\r\n                this.setState({\r\n                    movie : response.data.results\r\n                })})\r\n            \r\n            . catch( err => console.log(err));\r\n        \r\n        console.log(this.state.movie);\r\n        console.log(query);\r\n\r\n        \r\n    }*/\r\n\r\n    handleSubmit = () => {\r\n\r\n        let titleChoice = document.querySelector('#titleChoice');\r\n\r\n        this.state.movies.map((movie) => (\r\n            titleChoice.value === movie.title && console.log(movie.id)\r\n        ))\r\n\r\n        this.setState({\r\n            renderOneMovie: true\r\n        })\r\n\r\n        this.routeChange();\r\n\r\n    }\r\n\r\n    routeChange = () => {\r\n        let path = './../renderone';\r\n        this.props.history.push(path);\r\n      }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n\r\n\r\n            <MDBContainer className=\"form container-fluid m-auto\">\r\n\r\n                <Formik\r\n                    initialValues={ initialValues }  \r\n                    onSubmit={this.handleSubmit}\r\n                    validationSchema = {validationSchema}\r\n                >\r\n\r\n\r\n                    {({ handleSubmit, handleChange, handleBlur, isSubmitting, values }) => (\r\n                    <Form className=\"shadow\" onSubmit={ this.handleSubmit }>\r\n\r\n\r\n                        <MDBRow className=\"justify-content-center align-items-center\">\r\n                            <MDBCol className=\"col-4 w-100\">\r\n\r\n                                <MDBRow className=\"form-inline active-cyan-3 active-cyan-4\" style={{ color: 'whitesmoke' }}>\r\n                                    <MDBCol className=\"col-1\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </MDBCol>\r\n\r\n                                    <MDBCol className=\"w-100\">\r\n                                        <input\r\n                                            list=\"movies\" \r\n                                            className=\"form-control w-100 custom-select\" \r\n                                            type=\"text\" \r\n                                            placeholder=\"Search...\"\r\n                                            aria-label=\"Search\"\r\n                                            style={{ color: 'whitesmoke' }}\r\n                                            onChange = { this.handleChange } \r\n                                            id = 'titleChoice'\r\n                                            \r\n                                            />\r\n\r\n                                        <datalist id=\"movies\"> \r\n                                            \r\n                                            {this.state.movies.map((movie, key) => (\r\n                                                <option key={key} value={movie.title}></option> \r\n                                            ))}\r\n                                            \r\n                                        </datalist>\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n\r\n\r\n                                <ErrorMessage component=\"small\" name=\"search\" className=\"text-danger\" />\r\n\r\n                            </MDBCol>                        \r\n\r\n                            <MDBCol className=\"col-4 w-100\" >\r\n\r\n                                <select className=\"browser-default custom-select w-100\" \r\n                                        //onChange = { handleChange } \r\n                                        //onBlur = { handleBlur }\r\n                                >\r\n                                    <option defaultValue value=\"English\">English</option>\r\n                                    <option value=\"Français\">Français</option>\r\n                                </select>\r\n                        \r\n                                <ErrorMessage component=\"small\" name=\"language\" className=\"text-danger\" />\r\n                            </MDBCol>\r\n                  \r\n                            <MDBCol className=\"col-4\">\r\n                                <MDBBtn \r\n                                    type=\"submit\" \r\n                                    className=\"btn btn-primary w-100\"\r\n                                    //disabled = { isSubmitting }\r\n                                >\r\n                                    Submit\r\n                                </MDBBtn>\r\n                            </MDBCol>\r\n\r\n                        </MDBRow>\r\n\r\n\r\n                    </Form>\r\n                )}\r\n\r\n                </Formik>\r\n            </MDBContainer>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default withRouter(Search);\r\n","C:\\React\\allomovie\\src\\routes\\Routes.jsx",[],"C:\\React\\allomovie\\src\\api-back\\ApiMovie.jsx",[],"C:\\React\\allomovie\\src\\error-404\\Error404.jsx",[],"C:\\React\\allomovie\\src\\presentation\\Home.jsx",[],"C:\\React\\allomovie\\src\\Components\\RenderOneMovie.jsx",["71","72","73","74","75"],"import { MDBCard, MDBCardBody, MDBCardFooter, MDBCardHeader, MDBCardTitle, MDBCol, MDBContainer, MDBRow } from 'mdbreact';\r\nimport React, { Component } from 'react';\r\nimport ApiMovie from './../api-back/ApiMovie';\r\nimport Image from './Image';\r\n\r\n\r\nclass RenderOneMovie extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            movies : [],\r\n            title : 'Thunder Force'\r\n        }\r\n    }\r\n\r\n\r\n    extractParamsUrl = (get) => {\r\n        get = get.split('&');\r\n\r\n        console.log(get)\r\n        var result = {};\r\n    \r\n        get.forEach(function(el){\r\n            var param = el.split('=');\r\n            param[0] = param[0].replace('?', '');\r\n            result[param[0]] = param[1];\r\n        });\r\n    \r\n        return result;\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        ApiMovie.get('discover/movie')\r\n            .then(response => {\r\n                this.setState({ \r\n\r\n                    movies: response.data.results\r\n                    \r\n                });               \r\n            })\r\n    }\r\n\r\n    render() {\r\n\r\n        let get = this.props.location.search;\r\n\r\n        console.log(this.extractParamsUrl(get));\r\n\r\n        return (\r\n\r\n            <MDBContainer >\r\n                {this.state.movies.map((movie) => (\r\n                    this.state.title === movie.title && \r\n\r\n                    <div className=\"mx-auto my-5 text-white\">  \r\n                                           \r\n                      \r\n                        <h1 className=\"my-5 font-bold\">\r\n                            {movie.title}\r\n                        </h1>\r\n                    \r\n                        <MDBRow>\r\n                            <MDBCol>   \r\n                                <Image image = {movie.poster_path} width=\"500\" />\r\n                            </MDBCol>\r\n\r\n                            <MDBCol>\r\n                                <MDBRow className=\"my-5 fs-6\">\r\n                                    {movie.overview}\r\n                                </MDBRow>\r\n\r\n                                <hr />\r\n\r\n                                <MDBRow className=\"font-italic my-5\">\r\n                                    <MDBCol className=\"my-5\">\r\n                                        Date : {movie.release_date}\r\n                                    </MDBCol>\r\n                                    <MDBCol className=\"my-5\">\r\n                                        Note : {movie.vote_average} / 10\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                                \r\n                    </div>\r\n                       \r\n                ))}\r\n            </MDBContainer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RenderOneMovie;",{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"76","replacedBy":"80"},{"ruleId":"78","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":1,"column":10,"nodeType":"84","messageId":"85","endLine":1,"endColumn":18},{"ruleId":"82","severity":1,"message":"86","line":1,"column":10,"nodeType":"84","messageId":"85","endLine":1,"endColumn":17},{"ruleId":"82","severity":1,"message":"87","line":1,"column":19,"nodeType":"84","messageId":"85","endLine":1,"endColumn":30},{"ruleId":"82","severity":1,"message":"88","line":1,"column":32,"nodeType":"84","messageId":"85","endLine":1,"endColumn":45},{"ruleId":"82","severity":1,"message":"89","line":1,"column":47,"nodeType":"84","messageId":"85","endLine":1,"endColumn":60},{"ruleId":"82","severity":1,"message":"90","line":1,"column":62,"nodeType":"84","messageId":"85","endLine":1,"endColumn":74},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],["91"],["92"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'MDBCard' is defined but never used.","'MDBCardBody' is defined but never used.","'MDBCardFooter' is defined but never used.","'MDBCardHeader' is defined but never used.","'MDBCardTitle' is defined but never used.","no-global-assign","no-unsafe-negation"]